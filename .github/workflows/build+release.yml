name: Draft Cleepp Release

on:
  create:
  workflow_dispatch:
    branches:
      - forkmain
    inputs:
      releaseVersion:
        description: "Version to title release with (like: 1.0rc3)"
        type: string
        required: false
      isPrerelease:
        description: "Prerelease"
        type: boolean
        required: true
        default: true

jobs:
  build:
    name: Build Cleepp Non-AppStore Variant and Draft Release
    runs-on: macos-14 # required to use Xcode 15, "macos-latest" is actually older and uses Xcode 14
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Validate
        id: version
        run: |
          echo "Validating version, tag, and trigger"
          versnum=$(xcodebuild -scheme Cleepp -configuration Release -project Maccy.xcodeproj -showBuildSettings | sed -nr 's/^.*MARKETING_VERSION = (.*)$/\1/p')
          
          if [ -z "${{ inputs.releaseVersion }}" ] ; then
            echo "- Build version is $versnum"
            readableVersion=$versnum
            releaseName="Cleepp $versnum"
            echo "readableVersion=$readableVersion" >> $GITHUB_OUTPUT
            echo "releaseName=$releaseName" >> $GITHUB_OUTPUT
          else
            echo "- Build version is $versnum but overriding with ${{ inputs.releaseVersion }} for release & file names"
            readableVersion="${{ inputs.releaseVersion }}"
            releaseName="Cleepp ${{ inputs.releaseVersion }}"
            echo "readableVersion=$readableVersion" >> $GITHUB_OUTPUT
            echo "releaseName=$releaseName" >> $GITHUB_OUTPUT
          fi
          
          if [[ ${{ github.event_name }} == "workflow_dispatch" && git show-ref --tags v$readableVersion --quiet ]] ; then
            tag="v$readableVersion"
            echo "- After build will draft release \"$releaseName\" with tag \"$tag\" matching the version"
            echo "tag=$tag" >> $GITHUB_OUTPUT
            echo "continue=true" >> $GITHUB_OUTPUT
          elif [[ ${{ github.event_name }} == "workflow_dispatch" ]] ; then
            echo "- After build will draft untagged release \"$releaseName\" because triggered manually and no tag \"v$readableVersion\" found"
            echo "continue=true" >> $GITHUB_OUTPUT
          elif [ ${{ startsWith(github.ref, 'refs/tags/') }} ] ; then
            ref="${{ github.ref }}"
            tag="${ref:10}" # magic number 10 being the length of "refs/tags/", stripping that to leave just the tag name
            echo "- After build will draft release \"$releaseName\" with tag \"$tag\""
            echo "tag=$tag" >> $GITHUB_OUTPUT
            echo "continue=true" >> $GITHUB_OUTPUT
          else
            echo "- Aborting because not triggered manually or by a tag (github.event_name == ${{ github.event_name }}, gihub.ref == ${{ github.ref }})"
            echo "continue=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build
        if: steps.version.outputs.continue == 'true'
        run: |
          xcodebuild clean build analyze -scheme Cleepp -configuration Release -project Maccy.xcodeproj -derivedDataPath . | xcpretty && exit ${PIPESTATUS[0]}
      
      - name: "Codesign app bundle"
        if: steps.version.outputs.continue == 'true' && success()
        # Extract the secrets we defined earlier as environment variables
        env:
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        run: |
          echo "Codesigning"
          test -d Build/Products/Release/Cleepp.app || exit 1
          ls -ald Build/Products/Release/*.app
          exit 0 # !!! until the above env vars are correctly defined
          
          # Turn our base64-encoded certificate back to a regular .p12 file
          
          echo "- Base64-encode certificate to make \"certificate.p12\""
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          
          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment
          
          echo "- Create unlocked keychain \"build.keychain\""
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain 
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          
          echo "- Import \"certificate.p12\" into \"build.keychain\""
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          
          # We finally codesign our app bundle, specifying the Hardened runtime option
          
          echo "- Sign"
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime Build/Products/Release/Cleepp.app -v
      
      - name: "Notarize app bundle"
        if: steps.version.outputs.continue == 'true' && success()
        # Extract the secrets we defined earlier as environment variables
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          echo "Notarizing"
          test -d Build/Products/Release/Cleepp.app || exit 1
          exit 0 # !!! until the above env vars are correctly defined
          
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI
          
          echo "- Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"
          
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          
          echo "- Creating temp notarization archive"
          ditto -c -k --keepParent "target/mac/Cleepp.app" "notarization.zip"
          
          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          
          echo "- Notarize app"
          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait
          
          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "- Attach staple"
          xcrun stapler staple "Build/Products/Release/Cleepp.app"
      
      - name: Build Zip File
        if: steps.version.outputs.continue == 'true' && success()
        id: zip
        run: |
          echo "Building \"${{ steps.version.outputs.releaseName }}.zip\""
          test -d Build/Products/Release/Cleepp.app || exit 1
          
          readmeFileName="Cleepp version ${{ steps.version.outputs.readableVersion }} read me.rtf"
          archiveFileName="${{ steps.version.outputs.releaseName }}.zip"
          archiveDir="Build/Products/Release/${{ steps.version.outputs.releaseName }}"
          archiveFile="Build/Products/Release/$archiveFileName"
          echo "file=${archiveFile}" >> $GITHUB_OUTPUT
          
          echo "Assemble built app and readme file \"$readmeFileName\" in ${archiveDir}"
          mkdir "$archiveDir"
          cp "Designs/Cleepp/Cleepp download read me.rtf" "$archiveDir/$readmeFileName"
          mv Build/Products/Release/Cleepp.app "$archiveDir"
          
          echo "Create \"${archiveFileName}\" from contents of ${archiveDir}"
          ditto -c -k --sequesterRsrc --keepParent "$archiveDir" "${archiveFile}"
      
      - name: Draft Untagged Release
        if: steps.version.outputs.continue == 'true' && success() && steps.version.outputs.tag == ''
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ steps.version.outputs.releaseName }}"
          draft: true
          prerelease: ${{ inputs.isPrerelease }}
          files: "${{ steps.zip.outputs.file }}"
          fail_on_unmatched_files: true
      
      - name: Draft Tagged Release
        if: steps.version.outputs.continue == 'true' && success() && steps.version.outputs.tag
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ steps.version.outputs.releaseName }}"
          tag_name: "${{ steps.version.outputs.tag }}"
          draft: true
          prerelease: ${{ inputs.isPrerelease }}
          files: "${{ steps.zip.outputs.file }}"
          fail_on_unmatched_files: true
